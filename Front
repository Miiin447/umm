# coding: utf-8
# 사전 준비:
#   pip install customtkinter pillow

import os
import tkinter as tk
from tkinter import messagebox, filedialog
from PIL import Image, ImageTk, ImageSequence
import customtkinter as ctk
import shutil
from datetime import datetime

# ─────────────────────────── 테마 설정 ───────────────────────────
# Light 모드 고정 및 컬러 테마 설정
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

# ─────────────────────────── 전역 상태 정의 ───────────────────────────
# STATE: READY(준비) / WORKING(작업중) 중앙 배경 이미지 전환
STATE = "READY"

# 파일 경로 저장
UPLOADED_FILES = {
    "main": None,
    "patients": None,
    "Paymentitems": None
}

# 이미지 캐시 (참조 유지용)
IMAGE_CACHE = {
    "active_frames": {},  # 활성화 상태 프레임 캐시
    "lock_frames": None,  # 잠금 프레임 (모든 버튼이 공유)
    "current_images": {}  # 현재 표시 중인 이미지 저장
}

# ─────────────────────────── 콜백 함수 정의 ───────────────────────────

def on_help():
    """도움말 창 또는 안내 로직 호출"""
    print("❓ 사용법")

def on_upload_main_file():
    """메인 파일 업로드"""
    file_path = filedialog.askopenfilename(
        title="메인 파일 선택",
        filetypes=(("Excel 파일", "*.xlsx"), ("CSV 파일", "*.csv"), ("모든 파일", "*.*"))
    )
    if file_path:
        UPLOADED_FILES["main"] = file_path
        main_file_name = os.path.basename(file_path)
        
        # 파일 정보 업데이트
        update_file_labels()
        
        # 백업 생성
        try:
            backup_dir = "BACK UP"
            os.makedirs(backup_dir, exist_ok=True)
            backup_file = os.path.join(backup_dir, f"BACKUP_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{main_file_name}")
            shutil.copy2(file_path, backup_file)
            print(f"메인 파일 백업 생성 완료: {backup_file}")
        except Exception as e:
            print(f"백업 생성 중 오류 발생: {str(e)}")
            
        messagebox.showinfo("파일 업로드", f"메인 파일 업로드 완료: {main_file_name}")

def on_upload_patients_file():
    """환자 파일 업로드"""
    file_path = filedialog.askopenfilename(
        title="환자 파일 선택",
        filetypes=(("Excel 파일", "*.xlsx"), ("CSV 파일", "*.csv"), ("모든 파일", "*.*"))
    )
    if file_path:
        # 파일 이름이 'patients'로 시작하는지 확인
        file_name = os.path.basename(file_path).lower()
        if not file_name.startswith('patients'):
            messagebox.showwarning("파일 형식 오류", "환자 파일은 'patients'로 시작해야 합니다.")
            return
            
        UPLOADED_FILES["patients"] = file_path
        update_file_labels()
        messagebox.showinfo("파일 업로드", f"환자 파일 업로드 완료: {os.path.basename(file_path)}")

def on_upload_Paymentitems_file():
    """결제 파일 업로드"""
    file_path = filedialog.askopenfilename(
        title="결제 파일 선택",
        filetypes=(("Excel 파일", "*.xlsx"), ("CSV 파일", "*.csv"), ("모든 파일", "*.*"))
    )
    if file_path:
        # 파일 이름이 'Paymentitems'로 시작하는지 확인
        file_name = os.path.basename(file_path).lower()
        if not file_name.startswith('Paymentitems'):
            messagebox.showwarning("파일 형식 오류", "결제 파일은 'Paymentitems'로 시작해야 합니다.")
            return
            
        UPLOADED_FILES["Paymentitems"] = file_path
        update_file_labels()
        messagebox.showinfo("파일 업로드", f"결제 파일 업로드 완료: {os.path.basename(file_path)}")

def on_table_update():
    """표 업데이트 기능 실행"""
    print("📊 표 업데이트 실행")
    
    # 메인 파일 존재 확인
    if not UPLOADED_FILES["main"]:
        messagebox.showerror("오류", "메인 파일을 찾을 수 없습니다. 파일을 먼저 업로드해주세요.")
        return
        
    # 필요한 파일 확인
    if not UPLOADED_FILES["patients"] and not UPLOADED_FILES["Paymentitems"]:
        messagebox.showwarning("파일 없음", "Patients 파일과 Paymentitems 파일이 모두 없습니다. 파일을 먼저 업로드해주세요.")
        return
        
    # 메인 파일 접근 가능 여부 확인
    if not check_file_access(UPLOADED_FILES["main"]):
        messagebox.showerror("오류", f"메인 파일이 열려있거나 접근할 수 없습니다.\n파일을 닫고 다시 시도해주세요: {UPLOADED_FILES['main']}")
        return
        
    # 여기에 실제 표 업데이트 기능 구현


def on_patient_update():
    """환자 정보 업데이트 기능 실행"""
    print("👥 환자 정보 업데이트 실행")
    
    # 메인 파일 존재 확인
    if not UPLOADED_FILES["main"]:
        messagebox.showerror("오류", "메인 파일을 찾을 수 없습니다. 파일을 먼저 업로드해주세요.")
        return
        
    # 메인 파일 접근 가능 여부 확인
    if not check_file_access(UPLOADED_FILES["main"]):
        messagebox.showerror("오류", f"메인 파일이 열려있거나 접근할 수 없습니다.\n파일을 닫고 다시 시도해주세요: {UPLOADED_FILES['main']}")
        return
        


def on_exit():
    """프로그램 종료"""
    print("🚪 종료")
    root.destroy()

def on_chart_update():
    """도표 업데이트 기능 실행"""
    print("📊 도표 업데이트 실행")
    
    # 메인 파일 존재 확인
    if not UPLOADED_FILES["main"]:
        messagebox.showerror("오류", "메인 파일을 찾을 수 없습니다. 파일을 먼저 업로드해주세요.")
        return
        
    # 메인 파일 접근 가능 여부 확인
    if not check_file_access(UPLOADED_FILES["main"]):
        messagebox.showerror("오류", f"메인 파일이 열려있거나 접근할 수 없습니다.\n파일을 닫고 다시 시도해주세요: {UPLOADED_FILES['main']}")
        return
        
    # 여기에 실제 도표 업데이트 기능 구현

# ─────────────────── 중앙 이미지 업데이트 함수 ───────────────────

def update_center_image(new_state):
    """
    new_state 에 따라 중앙에 표시되는 이미지를 변경합니다.
    1) READY: 처리자 배경제거.png
    2) WORKING: 처리중 배경제거.png
    """
    global STATE, center_lbl, center_img
    STATE = new_state
    img_map = {"READY": "처리자 배경제거.png", "WORKING": "처리중 배경제거.png"}
    img_file = os.path.join(ASSET_DIR, img_map[STATE])
    if os.path.exists(img_file):
        pil_img = Image.open(img_file)
        center_img = ctk.CTkImage(pil_img, size=(200,200))
        center_lbl.configure(image=center_img)
        center_lbl.image = center_img  # 참조 유지
    else:
        print(f"[경고] 이미지 파일 없음: {img_file}")

def check_file_access(file_path):
    """파일 접근 가능 여부 확인 (다른 프로세스에서 열려있는지 확인)"""
    if not os.path.exists(file_path):
        print(f"파일이 존재하지 않습니다: {file_path}")
        return False
        
    try:
        # 파일이 다른 프로세스에 의해 잠겨있는지 확인
        with open(file_path, 'r+b') as f:
            return True
    except IOError:
        print(f"파일이 다른 프로세스에 의해 잠겨 있습니다: {file_path}")
        return False

def setup_folders():
    """필요한 폴더를 생성합니다"""
    folders = ['DONE', 'BACK UP', 'SKIPPED']
    for folder in folders:
        if not os.path.exists(folder):
            os.makedirs(folder)
            print(f"{folder} 폴더 생성 완료")

def update_file_labels():
    """파일 상태 레이블을 업데이트합니다"""
    # 필요한 폴더 생성
    setup_folders()
    
    # 파일 정보 가져오기
    main_file = os.path.basename(UPLOADED_FILES["main"]) if UPLOADED_FILES["main"] else None
    patients_file = os.path.basename(UPLOADED_FILES["patients"]) if UPLOADED_FILES["patients"] else None
    payment_items = os.path.basename(UPLOADED_FILES["Paymentitems"]) if UPLOADED_FILES["Paymentitems"] else None
    
    # 파일 감지 결과 출력
    file_summary = []
    if main_file:
        file_summary.append(f"메인: {main_file}")
    if patients_file:
        file_summary.append(f"Patients: {patients_file}")
    if payment_items:
        file_summary.append(f"Paymentitems: {payment_items}")
        
    if file_summary:
        print(f"파일 업로드 결과: {', '.join(file_summary)}")
    
    # 카드 레이블 업데이트
    file_rows = card.winfo_children()
    if len(file_rows) >= 3:
        # 메인 파일 레이블 업데이트
        main_row_labels = file_rows[0].winfo_children()
        if len(main_row_labels) >= 3:
            main_row_labels[2].configure(text=main_file if main_file else "없음")
        
        # 환자 파일 레이블 업데이트
        patient_row_labels = file_rows[1].winfo_children()
        if len(patient_row_labels) >= 3:
            patient_row_labels[2].configure(text=patients_file if patients_file else "없음")
        
        # 지불 파일 레이블 업데이트
        payment_row_labels = file_rows[2].winfo_children()
        if len(payment_row_labels) >= 3:
            payment_row_labels[2].configure(text=payment_items if payment_items else "없음")
    
    # 상태 레이블 업데이트
    if not main_file:
        status_lbl.configure(text="⚠️ 메인 파일 없음", text_color="red")
    elif not patients_file and not payment_items:
        status_lbl.configure(text="⚠️ 입력 파일 없음", text_color="orange")
    else:
        status_lbl.configure(text="준비 완료", text_color="black")
    
    # 버튼 상태 업데이트
    update_button_states(main_file, patients_file, payment_items)
    
    # 메인 파일 접근 가능 여부 확인 (파일이 다른 프로그램에서 열려있는지)
    if main_file and not check_file_access(UPLOADED_FILES["main"]):
        messagebox.showerror("파일 접근 오류", f"메인 파일이 다른 프로그램에서 열려있어 접근할 수 없습니다.\n파일을 닫고 다시 시도해주세요: {main_file}")
        return False
    
    return True

def create_hover_button(parent, gif, cb, tip, col):
    """아이콘 GIF 애니메이션 및 호버 팝업 기능 설정"""
    global IMAGE_CACHE
    
    # GIF 파일 경로 저장
    gif_path = os.path.join(ICON_DIR, gif)
    lock_gif_path = os.path.join(ICON_DIR, "잠금.gif")
    
    # 잠금 프레임을 전역 캐시에 로드 (모든 버튼이 공유)
    if IMAGE_CACHE["lock_frames"] is None and os.path.exists(lock_gif_path):
        lock_pil = Image.open(lock_gif_path)
        IMAGE_CACHE["lock_frames"] = [ImageTk.PhotoImage(f.convert("RGBA").resize(icon_size, Image.LANCZOS)) 
                                      for f in ImageSequence.Iterator(lock_pil)]
        print(f"잠금 이미지 {len(IMAGE_CACHE['lock_frames'])}개 프레임 로드됨")
    
    # 활성화 상태의 GIF 로드
    if gif not in IMAGE_CACHE["active_frames"] and os.path.exists(gif_path):
        pil = Image.open(gif_path)
        IMAGE_CACHE["active_frames"][gif] = [ImageTk.PhotoImage(f.convert("RGBA").resize(icon_size, Image.LANCZOS)) 
                                            for f in ImageSequence.Iterator(pil)]
        print(f"{gif} 이미지 {len(IMAGE_CACHE['active_frames'][gif])}개 프레임 로드됨")
    
    # 버튼 컨테이너 생성
    cont = ctk.CTkFrame(master=parent, fg_color="white", corner_radius=16,
                        width=icon_size[0]+8, height=icon_size[1]+8,
                        border_width=1, border_color=BG)
    cont.grid(row=0, column=col, padx=2, pady=4)
    cont.pack_propagate(False)
    
    # 기본 프레임 설정
    active_frames = IMAGE_CACHE["active_frames"].get(gif, [])
    lock_frames = IMAGE_CACHE["lock_frames"] or []
    current_frames = active_frames if active_frames else lock_frames
    
    # 현재 이미지 참조 캐싱
    if current_frames:
        IMAGE_CACHE["current_images"][f"btn_{col}"] = current_frames[0]
        
    # 레이블(버튼) 생성
    lbl = tk.Label(cont, image=IMAGE_CACHE["current_images"].get(f"btn_{col}"), bg="white")
    lbl.btn_id = f"btn_{col}"  # 버튼 식별자
    lbl.gif_name = gif  # 원래 GIF 이름 저장
    lbl.pack(expand=True)
    popup=None
    
    # 비활성화 상태 저장 변수
    lbl.is_disabled = False
    
    def show_pop():
        nonlocal popup
        if popup: popup.destroy()
        if lbl.is_disabled: return  # 비활성화 상태면 팝업 표시 안함
        
        x = lbl.winfo_rootx() + lbl.winfo_width()//2
        y = lbl.winfo_rooty() - 40
        popup = ctk.CTkToplevel(root)
        popup.overrideredirect(True)
        popup.geometry(f"+{x}+{y}")
        ctk.CTkLabel(master=popup, text=tip,
                     fg_color="#ffe0b2", text_color="black",
                     corner_radius=8, font=("맑은 고딕",10,"bold"),
                     padx=8,pady=4).pack()
    
    def hide_pop():
        nonlocal popup
        if popup: popup.destroy(); popup=None
    
    def start_anim():
        # 현재 사용중인 프레임 결정
        frames = IMAGE_CACHE["active_frames"].get(lbl.gif_name, []) if not lbl.is_disabled else IMAGE_CACHE["lock_frames"]
        if not frames:
            return
            
        def anim(i=0): 
            if hasattr(lbl, 'is_destroyed') and lbl.is_destroyed:
                return
                
            # 애니메이션 중 비활성화 상태가 변경되었는지 확인
            current_frames = IMAGE_CACHE["active_frames"].get(lbl.gif_name, []) if not lbl.is_disabled else IMAGE_CACHE["lock_frames"]
            if current_frames != frames:
                # 프레임이 변경되었으면 애니메이션 중지하고 다시 시작
                stop_anim()
                start_anim()
                return
                
            # 현재 프레임으로 이미지 업데이트
            if frames and len(frames) > 0:
                lbl.config(image=frames[i])
                IMAGE_CACHE["current_images"][lbl.btn_id] = frames[i]  # 현재 이미지 캐싱
                lbl.after_id = lbl.after(SPEED, anim, (i+1)%len(frames))
        anim()
    
    def stop_anim():
        if hasattr(lbl,'after_id'): 
            lbl.after_cancel(lbl.after_id)
            
        # 프레임 선택
        frames = IMAGE_CACHE["active_frames"].get(lbl.gif_name, []) if not lbl.is_disabled else IMAGE_CACHE["lock_frames"]
        if frames and len(frames) > 0:
            lbl.config(image=frames[0])
            IMAGE_CACHE["current_images"][lbl.btn_id] = frames[0]  # 현재 이미지 캐싱
    
    def on_click(e):
        if lbl.is_disabled: return  # 비활성화 상태면 클릭 무시
        cb()
    
    # 버튼 활성화/비활성화 메서드 추가
    def enable():
        lbl.is_disabled = False
        lbl.configure(bg="white")  # 일반 배경색
        
        # 활성화 상태의 프레임 가져오기
        active_frames = IMAGE_CACHE["active_frames"].get(lbl.gif_name, [])
        if active_frames and len(active_frames) > 0:
            lbl.config(image=active_frames[0])
            IMAGE_CACHE["current_images"][lbl.btn_id] = active_frames[0]  # 현재 이미지 캐싱
            print(f"버튼 {col} ({lbl.gif_name}) 활성화됨")
        
        lbl.bind("<Enter>", lambda e:(start_anim(),show_pop()))
        lbl.bind("<Leave>", lambda e:(stop_anim(),hide_pop()))
        lbl.bind("<Button-1>", on_click)
    
    def disable():
        lbl.is_disabled = True
        lbl.configure(bg="white")  # 활성화 상태와 같은 배경색 유지
        
        # 잠금 프레임 사용
        if IMAGE_CACHE["lock_frames"] and len(IMAGE_CACHE["lock_frames"]) > 0:
            lbl.config(image=IMAGE_CACHE["lock_frames"][0])
            IMAGE_CACHE["current_images"][lbl.btn_id] = IMAGE_CACHE["lock_frames"][0]  # 현재 이미지 캐싱
            print(f"버튼 {col} ({lbl.gif_name}) 비활성화됨")
        
        # 비활성화 상태에서도 호버시 애니메이션은 지원
        lbl.bind("<Enter>", lambda e: start_anim())
        lbl.bind("<Leave>", lambda e: stop_anim())
        # 클릭은 비활성화
        lbl.unbind("<Button-1>")
        hide_pop()
    
    # 소멸자 대응
    def on_destroy():
        lbl.is_destroyed = True
        if hasattr(lbl, 'after_id'): 
            lbl.after_cancel(lbl.after_id)
    
    lbl.bind("<Destroy>", lambda e: on_destroy())
    
    # 기본적으로 활성화 상태로 시작 (파일 감지, 종료 버튼)
    # 다른 버튼은 init_app에서 비활성화 설정
    lbl.enable = enable
    lbl.disable = disable
    enable()
    
    return lbl

def update_button_states(main_file, patients_file, payment_items):
    """파일 존재 여부에 따라 버튼 상태 업데이트"""
    print("\n===== 버튼 상태 업데이트 =====")
    print(f"메인 파일: {main_file}")
    print(f"환자 파일: {patients_file}")
    print(f"결제 파일: {payment_items}")
    
    # 버튼을 이름으로 찾기
    button_frames = group.winfo_children()
    if len(button_frames) < 4:
        print("버튼 프레임을 찾을 수 없습니다.")
        return

    # 각 버튼 프레임에서 라벨 찾기
    table_update_label = None
    patient_update_label = None
    chart_update_label = None
    
    for idx, frame in enumerate(button_frames):
        for widget in frame.winfo_children():
            if isinstance(widget, tk.Label):
                if idx == 0:  # 표 업데이트 버튼 (첫 번째)
                    table_update_label = widget
                elif idx == 1:  # 환자 정보 업데이트 버튼 (두 번째)
                    patient_update_label = widget
                elif idx == 2:  # 도표 업데이트 버튼 (세 번째)
                    chart_update_label = widget
    
    # 메인 파일이 있으면 환자 정보 업데이트 버튼과 도표 업데이트 버튼 활성화
    if main_file:
        print("메인 파일 존재: 환자 정보 업데이트 버튼과 도표 업데이트 버튼 활성화")
        
        if patient_update_label and hasattr(patient_update_label, 'enable'):
            patient_update_label.enable()
        
        if chart_update_label and hasattr(chart_update_label, 'enable'):
            chart_update_label.enable()
        
        # 메인 파일과 Patients 또는 Paymentitems 파일 중 하나라도 있으면 표 업데이트 버튼 활성화
        if patients_file or payment_items:
            print("Patients 또는 Paymentitems 파일 존재: 표 업데이트 버튼 활성화")
            if table_update_label and hasattr(table_update_label, 'enable'):
                table_update_label.enable()
        else:
            print("Patients와 Paymentitems 파일 모두 없음: 표 업데이트 버튼 비활성화")
            # 필요한 다른 파일이 없으면 표 업데이트 버튼 비활성화
            if table_update_label and hasattr(table_update_label, 'disable'):
                table_update_label.disable()
    else:
        print("메인 파일 없음: 세 버튼 모두 비활성화")
        # 메인 파일이 없으면 세 버튼 모두 비활성화
        if patient_update_label and hasattr(patient_update_label, 'disable'):
            patient_update_label.disable()
        if table_update_label and hasattr(table_update_label, 'disable'):
            table_update_label.disable()
        if chart_update_label and hasattr(chart_update_label, 'disable'):
            chart_update_label.disable()
    print("===== 버튼 상태 업데이트 완료 =====\n")

# ─────────────────────────── 메인 윈도우 설정 ───────────────────────────
BG = "#fff0e5"
root = ctk.CTk()
root.geometry("450x600")  # 세로 높이를 600으로 증가
root.title("케이닥 마크7 4.0")
root.configure(fg_color=BG)

# 1) 상단 타이틀
ctk.CTkLabel(
    master=root,
    text="🌟 케이닥 마크7 4.0 🌟",
    font=("맑은 고딕", 18, "bold"),
    text_color="black"
).pack(pady=(30,8))

# 2) 도움말 버튼
help_frame = ctk.CTkFrame(master=root, fg_color="transparent")
help_frame.pack(fill="x", padx=16, pady=(0,16))
ctk.CTkButton(
    master=help_frame,
    text="사용법",
    font=("맑은 고딕", 11, "bold"),
    fg_color="#ffe0b2", hover_color="#ffc8a2",
    text_color="black", corner_radius=12,
    width=60, height=30,
    command=on_help
).pack(side="right")

# 3) 중앙 이미지 표시 영역
ASSET_DIR = os.path.join(os.path.dirname(__file__), "power")
initial_img = os.path.join(ASSET_DIR, "처리자 배경제거.png")
if os.path.exists(initial_img):
    pil = Image.open(initial_img)
    center_img = ctk.CTkImage(pil, size=(200,200))
    center_lbl = ctk.CTkLabel(master=root, image=center_img, text="", fg_color="transparent")
    center_lbl.image = center_img
    center_lbl.pack(expand=True, pady=0)
else:
    tk.Frame(root, bg=BG).pack(expand=True, fill="both")

# 4) 하단 버튼 그룹 컨테이너
group = ctk.CTkFrame(master=root, fg_color="#FFF8E1", corner_radius=20,
                    border_width=1, border_color="#e0e0e0")
group.pack(side="bottom", fill="x", padx=16, pady=(0,16))
for i in range(4): group.grid_columnconfigure(i, weight=1)  # 4개 버튼만 사용

# 5) 버튼 생성 및 애니메이션 + 팝업 설명
ICON_DIR = os.path.join(os.path.dirname(__file__), "icon")
icon_size = (64,64)
SPEED = 1000//60
buttons = [
    ("표 업데이트.gif", on_table_update, "표 업데이트"),
    ("환자 정보 업데이트.gif", on_patient_update, "환자 정보 업데이트"),
    ("도표 업데이트.gif", on_chart_update, "도표 업데이트"),
    ("종료.gif", on_exit, "종료"),
]

for idx,(g,cb,tip) in enumerate(buttons): create_hover_button(group, g, cb, tip, idx)

# 6) 상태 표시
status_frame = ctk.CTkFrame(master=root, fg_color="transparent")
status_frame.pack(side="bottom", fill="x", padx=16, pady=(0,0))
# 상태 레이블 왼쪽 여백을 12px로 설정해 메인파일 카드와 동일한 간격 유지
status_lbl = ctk.CTkLabel(master=status_frame, text="(상태표시)", font=("맑은 고딕",11), text_color="#777777")
status_lbl.pack(side="left", padx=(12,0))

# 7) 파일 업로드 카드
card = ctk.CTkFrame(master=root, fg_color="white", corner_radius=16, border_width=1, border_color="#e0e0e0")
card.pack(side="bottom", fill="x", padx=16, pady=(0,2))

# 메인 파일 업로드 취소 함수
def cancel_main_file():
    UPLOADED_FILES["main"] = None
    update_file_labels()
    messagebox.showinfo("업로드 취소", "메인 파일 업로드가 취소되었습니다.")

# 환자 파일 업로드 취소 함수
def cancel_patients_file():
    UPLOADED_FILES["patients"] = None
    update_file_labels()
    messagebox.showinfo("업로드 취소", "환자 파일 업로드가 취소되었습니다.")

# 결제 파일 업로드 취소 함수
def cancel_Paymentitems_file():
    UPLOADED_FILES["Paymentitems"] = None
    update_file_labels()
    messagebox.showinfo("업로드 취소", "결제 파일 업로드가 취소되었습니다.")

# 8) 시작시 앱 초기화
def init_app():
    """앱 초기화: 기본 상태 설정"""
    print("앱 초기화 중...")
    # 필요한 폴더 생성
    setup_folders()
    
    # 상태 레이블 초기화
    status_lbl.configure(text="파일 업로드가 필요합니다", text_color="#555555")
    
    # 기본 버튼 상태 설정 - 종료 버튼만 활성화하고 나머지는 비활성화
    button_frames = group.winfo_children()
    if len(button_frames) >= 4:
        # 표 업데이트, 환자 정보 업데이트, 도표 업데이트 버튼 비활성화
        for idx, frame in enumerate(button_frames):
            for widget in frame.winfo_children():
                if isinstance(widget, tk.Label):
                    if idx in [0, 1, 2] and hasattr(widget, 'disable'):  # 표 업데이트, 환자 정보, 도표 업데이트 버튼
                        widget.disable()
    
    print("앱 초기화 완료")

# 100ms 후에 초기화 실행 (UI가 모두 표시된 후)
root.after(100, init_app)

root.mainloop()
